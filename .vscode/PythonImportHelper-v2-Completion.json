[
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "scrapy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scrapy",
        "description": "scrapy",
        "detail": "scrapy",
        "documentation": {}
    },
    {
        "label": "signals",
        "importPath": "scrapy",
        "description": "scrapy",
        "isExtraImport": true,
        "detail": "scrapy",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "importPath": "nsreg.items",
        "description": "nsreg.items",
        "isExtraImport": true,
        "detail": "nsreg.items",
        "documentation": {}
    },
    {
        "label": "is_item",
        "importPath": "itemadapter",
        "description": "itemadapter",
        "isExtraImport": true,
        "detail": "itemadapter",
        "documentation": {}
    },
    {
        "label": "ItemAdapter",
        "importPath": "itemadapter",
        "description": "itemadapter",
        "isExtraImport": true,
        "detail": "itemadapter",
        "documentation": {}
    },
    {
        "label": "ItemAdapter",
        "importPath": "itemadapter",
        "description": "itemadapter",
        "isExtraImport": true,
        "detail": "itemadapter",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "find_price",
        "importPath": "nsreg.utils",
        "description": "nsreg.utils",
        "isExtraImport": true,
        "detail": "nsreg.utils",
        "documentation": {}
    },
    {
        "label": "find_price_sub",
        "importPath": "nsreg.utils",
        "description": "nsreg.utils",
        "isExtraImport": true,
        "detail": "nsreg.utils",
        "documentation": {}
    },
    {
        "label": "find_price_withoutre",
        "importPath": "nsreg.utils",
        "description": "nsreg.utils",
        "isExtraImport": true,
        "detail": "nsreg.utils",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotFound",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "catalog",
        "description": "catalog",
        "isExtraImport": true,
        "detail": "catalog",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "Nsreg101domainSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_101domain",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_101domain",
        "peekOfCode": "class Nsreg101domainSpider(scrapy.Spider):\n    name = 'nsreg_101domain'\n    allowed_domains = ['sidename.ru']\n    start_urls = ['https://sidename.ru/site/tariffs']\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_101domain",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_101domain",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_101domain",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass Nsreg101domainSpider(scrapy.Spider):\n    name = 'nsreg_101domain'\n    allowed_domains = ['sidename.ru']\n    start_urls = ['https://sidename.ru/site/tariffs']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_101domain",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_101domain",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_101domain",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass Nsreg101domainSpider(scrapy.Spider):\n    name = 'nsreg_101domain'\n    allowed_domains = ['sidename.ru']\n    start_urls = ['https://sidename.ru/site/tariffs']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_101domain",
        "documentation": {}
    },
    {
        "label": "Nsreg2domainsSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_2domains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_2domains",
        "peekOfCode": "class Nsreg2domainsSpider(scrapy.Spider):\n    name = 'nsreg_2domains'\n    allowed_domains = ['2domains.ru']\n    start_urls = ['https://2domains.ru/domains']\n    def parse_pricechange(self, response):\n        pricechange = response.xpath('/html/body/div/div[1]/section[1]/div/div/div/div/div[2]/div[2]/div/span/text()').get()\n        pricechange = find_price(REGEX_CHANGE_PATTERN, pricechange)\n        item = NsregItem()\n        item['name'] = \"ООО «2ДОМЕЙНС.РУ»\"  \n        price = item.get('price', EMPTY_PRICE)",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_2domains",
        "documentation": {}
    },
    {
        "label": "REGEX_PROLONG_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_2domains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_2domains",
        "peekOfCode": "REGEX_PROLONG_PATTERN = r\".*Продление\\s+—\\s+(([0-9]*[.,])?[0-9]+)\\s+₽.*\"\nREGEX_CHANGE_PATTERN = r\".*(([0-9]*[.,])?[0-9]{3})\\s+₽.*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass Nsreg2domainsSpider(scrapy.Spider):\n    name = 'nsreg_2domains'\n    allowed_domains = ['2domains.ru']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_2domains",
        "documentation": {}
    },
    {
        "label": "REGEX_CHANGE_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_2domains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_2domains",
        "peekOfCode": "REGEX_CHANGE_PATTERN = r\".*(([0-9]*[.,])?[0-9]{3})\\s+₽.*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass Nsreg2domainsSpider(scrapy.Spider):\n    name = 'nsreg_2domains'\n    allowed_domains = ['2domains.ru']\n    start_urls = ['https://2domains.ru/domains']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_2domains",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_2domains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_2domains",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass Nsreg2domainsSpider(scrapy.Spider):\n    name = 'nsreg_2domains'\n    allowed_domains = ['2domains.ru']\n    start_urls = ['https://2domains.ru/domains']\n    def parse_pricechange(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_2domains",
        "documentation": {}
    },
    {
        "label": "Nsreg4itSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_4it",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_4it",
        "peekOfCode": "class Nsreg4itSpider(scrapy.Spider):\n    name = \"nsreg_4it\"\n    allowed_domains = [\"4it.ru\"]\n    start_urls = [\"https://4it.ru/#price\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div[1]/div[4]/div/div[2]/div[3]/div/div/div/div[2]/div/div/div[1]/div/table/tbody/tr[2]/td[2]/div/p/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/div[1]/div[4]/div/div[2]/div[3]/div/div/div/div[2]/div/div/div[2]/div[3]/table/tr[2]/td/div/p/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/div[1]/div[4]/div/div[2]/div[3]/div/div/div/div[2]/div/div/div[2]/div[3]/table/tr[2]/td/div/p/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_4it",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_4it",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_4it",
        "peekOfCode": "REGEX_PATTERN = r\"(([0-9]*[.,])?[0-9]*)\\s+₽.*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass Nsreg4itSpider(scrapy.Spider):\n    name = \"nsreg_4it\"\n    allowed_domains = [\"4it.ru\"]\n    start_urls = [\"https://4it.ru/#price\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_4it",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_4it",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_4it",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass Nsreg4itSpider(scrapy.Spider):\n    name = \"nsreg_4it\"\n    allowed_domains = [\"4it.ru\"]\n    start_urls = [\"https://4it.ru/#price\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_4it",
        "documentation": {}
    },
    {
        "label": "Nsreg_ad100Spider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_a100",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_a100",
        "peekOfCode": "class Nsreg_ad100Spider(scrapy.Spider):\n    name = 'nsreg_a100'\n    allowed_domains = ['a100.ru']\n    start_urls = ['https://a100.ru/#overlappable']\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div[1]/div[2]/div/div/div[1]/div/div/div/div[1]/div/div/div[2]/div/p[1]/text()').get()\n        pricereg = find_price_sub(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/div[1]/div[2]/div/div/div[1]/div/div/div/div[2]/div/div/div[2]/div/p[1]/text()').get()\n        priceprolong = find_price_sub(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/div[1]/div[2]/div/div/div[1]/div/div/div/div[3]/div/div/div[2]/div/p[1]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_a100",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_a100",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_a100",
        "peekOfCode": "REGEX_PATTERN = r\".*(\\d+\\s+\\d+).*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass Nsreg_ad100Spider(scrapy.Spider):\n    name = 'nsreg_a100'\n    allowed_domains = ['a100.ru']\n    start_urls = ['https://a100.ru/#overlappable']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_a100",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_a100",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_a100",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass Nsreg_ad100Spider(scrapy.Spider):\n    name = 'nsreg_a100'\n    allowed_domains = ['a100.ru']\n    start_urls = ['https://a100.ru/#overlappable']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_a100",
        "documentation": {}
    },
    {
        "label": "Nsreg_aabSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_aab",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_aab",
        "peekOfCode": "class Nsreg_aabSpider(scrapy.Spider):\n    name = 'nsreg_aab'\n    allowed_domains = ['aab.ru']\n    start_urls = ['https://aab.ru/tarifi_na_uslugi.html']\n    def parse(self, response):\n        pricereg = response.xpath('//*[@id=\"full_story\"]/table/tbody/tr[3]/td[2]/text()').get()\n        pricereg = find_price_withoutre(pricereg)\n        priceprolong = response.xpath('//*[@id=\"full_story\"]/table/tbody/tr[6]/td[2]/text()').get()\n        priceprolong = find_price_withoutre(priceprolong)\n        pricechange = response.xpath('//*[@id=\"full_story\"]/table/tbody/tr[9]/td[2]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_aab",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_aab",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_aab",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass Nsreg_aabSpider(scrapy.Spider):\n    name = 'nsreg_aab'\n    allowed_domains = ['aab.ru']\n    start_urls = ['https://aab.ru/tarifi_na_uslugi.html']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_aab",
        "documentation": {}
    },
    {
        "label": "NsregActiveDomainsSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_active_domains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_active_domains",
        "peekOfCode": "class NsregActiveDomainsSpider(scrapy.Spider):\n    name = 'nsreg_active_domains'\n    allowed_domains = ['active.domains']\n    start_urls = ['http://active.domains/domains/']\n    def parse(self, response):\n        pricereg = response.xpath('//*[@id=\"show_domain\"]/div/div/table/tbody/tr[1]/td[3]/a/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('//*[@id=\"show_domain\"]/div/div/table/tbody/tr[1]/td[4]/a/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('//*[@id=\"show_domain\"]/div/div/table/tbody/tr[1]/td[5]/a/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_active_domains",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_active_domains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_active_domains",
        "peekOfCode": "REGEX_PATTERN = r\".*(([0-9]*[.,])?[0-9]{3}).*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregActiveDomainsSpider(scrapy.Spider):\n    name = 'nsreg_active_domains'\n    allowed_domains = ['active.domains']\n    start_urls = ['http://active.domains/domains/']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_active_domains",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_active_domains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_active_domains",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregActiveDomainsSpider(scrapy.Spider):\n    name = 'nsreg_active_domains'\n    allowed_domains = ['active.domains']\n    start_urls = ['http://active.domains/domains/']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_active_domains",
        "documentation": {}
    },
    {
        "label": "NsregAltnamesSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_altnames",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_altnames",
        "peekOfCode": "class NsregAltnamesSpider(scrapy.Spider):\n    name = 'nsreg_altnames'\n    allowed_domains = ['altnames.ru']\n    start_urls = ['http://altnames.ru/']\n    def parse(self, response):\n        pricereg = response.xpath('//*[@id=\"post-10\"]/div/div/div/div/section[4]/div/div/div/div[2]/div/table/tbody/tr[1]/td[2]/text()').get()\n        pricereg = find_price_sub(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('//*[@id=\"post-10\"]/div/div/div/div/section[4]/div/div/div/div[2]/div/table/tbody/tr[2]/td[2]/text()').get()\n        priceprolong = find_price_sub(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('//*[@id=\"post-10\"]/div/div/div/div/section[4]/div/div/div/div[2]/div/table/tbody/tr[3]/td[2]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_altnames",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_altnames",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_altnames",
        "peekOfCode": "REGEX_PATTERN = r\".*([0-9]+[\\s][0-9]{3}).*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregAltnamesSpider(scrapy.Spider):\n    name = 'nsreg_altnames'\n    allowed_domains = ['altnames.ru']\n    start_urls = ['http://altnames.ru/']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_altnames",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_altnames",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_altnames",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregAltnamesSpider(scrapy.Spider):\n    name = 'nsreg_altnames'\n    allowed_domains = ['altnames.ru']\n    start_urls = ['http://altnames.ru/']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_altnames",
        "documentation": {}
    },
    {
        "label": "NsregArdisSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_ardis",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_ardis",
        "peekOfCode": "class NsregArdisSpider(scrapy.Spider):\n    name = 'nsreg_ardis'\n    allowed_domains = ['ardis.ru']\n    start_urls = ['https://ardis.ru/domains/']\n    def parse(self, response):\n        pricereg = response.xpath('//*[@id=\"show_domain\"]/div/div/table/tbody/tr[1]/td[3]/a/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('//*[@id=\"show_domain\"]/div/div/table/tbody/tr[1]/td[4]/a/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('//*[@id=\"show_domain\"]/div/div/table/tbody/tr[1]/td[5]/a/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_ardis",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_ardis",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_ardis",
        "peekOfCode": "REGEX_PATTERN = r\".*(([0-9]*[.,])?[0-9]{3}).*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregArdisSpider(scrapy.Spider):\n    name = 'nsreg_ardis'\n    allowed_domains = ['ardis.ru']\n    start_urls = ['https://ardis.ru/domains/']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_ardis",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_ardis",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_ardis",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregArdisSpider(scrapy.Spider):\n    name = 'nsreg_ardis'\n    allowed_domains = ['ardis.ru']\n    start_urls = ['https://ardis.ru/domains/']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_ardis",
        "documentation": {}
    },
    {
        "label": "NsregAtexSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_atex",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_atex",
        "peekOfCode": "class NsregAtexSpider(scrapy.Spider):\n    name = 'nsreg_atex'\n    allowed_domains = ['atex.ru']\n    start_urls = ['https://atex.ru/domains/']\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div/div[2]/div/div/div/div/div[3]/div/div/div/div/table/tbody/tr[1]/td[2]/div/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/div/div[2]/div/div/div/div/div[3]/div/div/div/div/table/tbody/tr[3]/td[2]/div/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/div/div[2]/div/div/div/div/div[3]/div/div/div/div/table/tbody/tr[5]/td[2]/div/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_atex",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_atex",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_atex",
        "peekOfCode": "REGEX_PATTERN = r\".*(([0-9]*[.,])?[0-9]{3}).*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregAtexSpider(scrapy.Spider):\n    name = 'nsreg_atex'\n    allowed_domains = ['atex.ru']\n    start_urls = ['https://atex.ru/domains/']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_atex",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_atex",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_atex",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregAtexSpider(scrapy.Spider):\n    name = 'nsreg_atex'\n    allowed_domains = ['atex.ru']\n    start_urls = ['https://atex.ru/domains/']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_atex",
        "documentation": {}
    },
    {
        "label": "NsregAxelnameSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_axelname",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_axelname",
        "peekOfCode": "class NsregAxelnameSpider(scrapy.Spider):\n    name = 'nsreg_axelname'\n    allowed_domains = ['axelname.ru']\n    start_urls = ['https://axelname.ru/domains/']\n    def parse(self, response):\n        pricereg = response.xpath('//*[@id=\"pricing-tables1-h\"]/div/div/div[1]/div[1]/div/span[2]/text()').get()\n        pricereg = find_price_withoutre(pricereg)\n        priceprolong = response.xpath('//*[@id=\"pricing-tables1-h\"]/div/div/div[1]/div[1]/div/span[2]/text()').get()\n        priceprolong = find_price_withoutre(priceprolong)\n        item = NsregItem()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_axelname",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_axelname",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_axelname",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregAxelnameSpider(scrapy.Spider):\n    name = 'nsreg_axelname'\n    allowed_domains = ['axelname.ru']\n    start_urls = ['https://axelname.ru/domains/']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_axelname",
        "documentation": {}
    },
    {
        "label": "NsregBeelineSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beeline",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beeline",
        "peekOfCode": "class NsregBeelineSpider(scrapy.Spider):\n    name = 'nsreg_beeline'\n    allowed_domains = ['moskva.beeline.ru']\n    start_urls = ['https://moskva.beeline.ru/business/domen/registratsiya-i-podderzhka-domenov/']\n    def parse(self, response):\n        pricereg = response.xpath('//*[@id=\"react_aDGOLumF5U2Eyvb2G5m2g\"]/div/div[3]/div[3]/section[1]/div/section/div[2]/div[2]/div[1]/div/div[2]/div[1]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('//*[@id=\"react_aDGOLumF5U2Eyvb2G5m2g\"]/div/div[3]/div[3]/section[1]/div/section/div[2]/div[2]/div[1]/div/div[2]/div[1]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = None",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beeline",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beeline",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beeline",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregBeelineSpider(scrapy.Spider):\n    name = 'nsreg_beeline'\n    allowed_domains = ['moskva.beeline.ru']\n    start_urls = ['https://moskva.beeline.ru/business/domen/registratsiya-i-podderzhka-domenov/']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beeline",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beeline",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beeline",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregBeelineSpider(scrapy.Spider):\n    name = 'nsreg_beeline'\n    allowed_domains = ['moskva.beeline.ru']\n    start_urls = ['https://moskva.beeline.ru/business/domen/registratsiya-i-podderzhka-domenov/']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beeline",
        "documentation": {}
    },
    {
        "label": "NsregBegetSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beget",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beget",
        "peekOfCode": "class NsregBegetSpider(scrapy.Spider):\n    name = 'nsreg_beget'\n    allowed_domains = ['beget.com']\n    start_urls = ['https://beget.com/ru/domains/zone/ru']\n    def parse(self, response):\n        pricereg = response.xpath('//*[@id=\"__layout\"]/div/div[2]/div/div[2]/div[1]/div/div[2]/div/div[1]/div/div[1]/p[2]/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('//*[@id=\"__layout\"]/div/div[2]/div/div[2]/div[1]/div/div[2]/div/div[1]/div/div[2]/p[2]/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        item = NsregItem()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beget",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beget",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beget",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]{3,}).*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregBegetSpider(scrapy.Spider):\n    name = 'nsreg_beget'\n    allowed_domains = ['beget.com']\n    start_urls = ['https://beget.com/ru/domains/zone/ru']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beget",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beget",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beget",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregBegetSpider(scrapy.Spider):\n    name = 'nsreg_beget'\n    allowed_domains = ['beget.com']\n    start_urls = ['https://beget.com/ru/domains/zone/ru']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_beget",
        "documentation": {}
    },
    {
        "label": "NsregBestregSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bestreg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bestreg",
        "peekOfCode": "class NsregBestregSpider(scrapy.Spider):\n    name = \"nsreg_bestreg\"\n    allowed_domains = [\"www.bestreg24.ru\"]\n    start_urls = [\"https://www.bestreg24.ru/price/\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div[1]/div[3]/article/section/table[1]/tr/td[1]/article[1]/div/table/tr[5]/td[2]/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/div[1]/div[3]/article/section/table[1]/tr/td[1]/article[1]/div/table/tr[5]/td[3]/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/div[1]/div[3]/article/section/table[2]/tr/td[1]/article[2]/div/table/tr[10]/td[2]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bestreg",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bestreg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bestreg",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregBestregSpider(scrapy.Spider):\n    name = \"nsreg_bestreg\"\n    allowed_domains = [\"www.bestreg24.ru\"]\n    start_urls = [\"https://www.bestreg24.ru/price/\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bestreg",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bestreg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bestreg",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregBestregSpider(scrapy.Spider):\n    name = \"nsreg_bestreg\"\n    allowed_domains = [\"www.bestreg24.ru\"]\n    start_urls = [\"https://www.bestreg24.ru/price/\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bestreg",
        "documentation": {}
    },
    {
        "label": "NsregBetnamesSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_betnames",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_betnames",
        "peekOfCode": "class NsregBetnamesSpider(scrapy.Spider):\n    name = \"nsreg_betnames\"\n    allowed_domains = [\"betnames.ru\"]\n    start_urls = [\"https://betnames.ru/#features-2\"]\n    def parse(self, response):\n        pricereg = response.xpath('//*[@id=\"features-2\"]/div/div/div[1]/div/p/text()').get()\n        pricereg = find_price_sub(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('//*[@id=\"features-2\"]/div/div/div[2]/div/p/text()').get()\n        priceprolong = find_price_sub(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('//*[@id=\"features-2\"]/div/div/div[3]/div/p/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_betnames",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_betnames",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_betnames",
        "peekOfCode": "REGEX_PATTERN = r\".*(\\d+\\s+\\d+).*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregBetnamesSpider(scrapy.Spider):\n    name = \"nsreg_betnames\"\n    allowed_domains = [\"betnames.ru\"]\n    start_urls = [\"https://betnames.ru/#features-2\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_betnames",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_betnames",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_betnames",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregBetnamesSpider(scrapy.Spider):\n    name = \"nsreg_betnames\"\n    allowed_domains = [\"betnames.ru\"]\n    start_urls = [\"https://betnames.ru/#features-2\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_betnames",
        "documentation": {}
    },
    {
        "label": "NsregBigregSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bigreg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bigreg",
        "peekOfCode": "class NsregBigregSpider(scrapy.Spider):\n    name = \"nsreg_bigreg\"\n    allowed_domains = [\"www.bigreg.ru\"]\n    start_urls = [\"https://www.bigreg24.ru/price/\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div[1]/div[3]/article/section/table[1]/tr/td[1]/article[1]/div/table/tr[5]/td[2]/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/div[1]/div[3]/article/section/table[1]/tr/td[1]/article[1]/div/table/tr[5]/td[3]/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/div[1]/div[3]/article/section/table[2]/tr/td[1]/article[2]/div/table/tr[10]/td[2]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bigreg",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bigreg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bigreg",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregBigregSpider(scrapy.Spider):\n    name = \"nsreg_bigreg\"\n    allowed_domains = [\"www.bigreg.ru\"]\n    start_urls = [\"https://www.bigreg24.ru/price/\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bigreg",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bigreg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bigreg",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregBigregSpider(scrapy.Spider):\n    name = \"nsreg_bigreg\"\n    allowed_domains = [\"www.bigreg.ru\"]\n    start_urls = [\"https://www.bigreg24.ru/price/\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bigreg",
        "documentation": {}
    },
    {
        "label": "NsregBitnamesSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bitnames",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bitnames",
        "peekOfCode": "class NsregBitnamesSpider(scrapy.Spider):\n    name = \"nsreg_bitnames\"\n    allowed_domains = [\"bitnames.ru\"]\n    start_urls = [\"https://bitnames.ru/#features-2\"]\n    def parse(self, response):\n        pricereg = response.xpath('//*[@id=\"features-2\"]/div/div/div[1]/div/p/text()').get()\n        pricereg = find_price_sub(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('//*[@id=\"features-2\"]/div/div/div[2]/div/p/text()').get()\n        priceprolong = find_price_sub(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('//*[@id=\"features-2\"]/div/div/div[3]/div/p/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bitnames",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bitnames",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bitnames",
        "peekOfCode": "REGEX_PATTERN = r\".*(\\d+\\s+\\d+).*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregBitnamesSpider(scrapy.Spider):\n    name = \"nsreg_bitnames\"\n    allowed_domains = [\"bitnames.ru\"]\n    start_urls = [\"https://bitnames.ru/#features-2\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bitnames",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bitnames",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bitnames",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregBitnamesSpider(scrapy.Spider):\n    name = \"nsreg_bitnames\"\n    allowed_domains = [\"bitnames.ru\"]\n    start_urls = [\"https://bitnames.ru/#features-2\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_bitnames",
        "documentation": {}
    },
    {
        "label": "NsregCitydomainsSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_citydomains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_citydomains",
        "peekOfCode": "class NsregCitydomainsSpider(scrapy.Spider):\n    name = \"nsreg_citydomains\"\n    allowed_domains = [\"citydomains.ru\"]\n    start_urls = [\"https://citydomains.ru/site/tariffs\"]\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_citydomains",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_citydomains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_citydomains",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nname = \"ООО «Городские Домены»\"\nclass NsregCitydomainsSpider(scrapy.Spider):\n    name = \"nsreg_citydomains\"\n    allowed_domains = [\"citydomains.ru\"]\n    start_urls = [\"https://citydomains.ru/site/tariffs\"]\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_citydomains",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_citydomains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_citydomains",
        "peekOfCode": "name = \"ООО «Городские Домены»\"\nclass NsregCitydomainsSpider(scrapy.Spider):\n    name = \"nsreg_citydomains\"\n    allowed_domains = [\"citydomains.ru\"]\n    start_urls = [\"https://citydomains.ru/site/tariffs\"]\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_citydomains",
        "documentation": {}
    },
    {
        "label": "NsregClickhostSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickhost",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickhost",
        "peekOfCode": "class NsregClickhostSpider(scrapy.Spider):\n    name = \"nsreg_clickhost\"\n    allowed_domains = [\"www.clickhost24.ru\"]\n    start_urls = [\"https://www.clickhost24.ru/price/\"]\n    def parse(self, response):\n        item = moscow_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickhost",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickhost",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickhost",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nname = \"ООО «КЛИКХОСТ»\"\nclass NsregClickhostSpider(scrapy.Spider):\n    name = \"nsreg_clickhost\"\n    allowed_domains = [\"www.clickhost24.ru\"]\n    start_urls = [\"https://www.clickhost24.ru/price/\"]\n    def parse(self, response):\n        item = moscow_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickhost",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickhost",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickhost",
        "peekOfCode": "name = \"ООО «КЛИКХОСТ»\"\nclass NsregClickhostSpider(scrapy.Spider):\n    name = \"nsreg_clickhost\"\n    allowed_domains = [\"www.clickhost24.ru\"]\n    start_urls = [\"https://www.clickhost24.ru/price/\"]\n    def parse(self, response):\n        item = moscow_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickhost",
        "documentation": {}
    },
    {
        "label": "NsregClickregSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickreg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickreg",
        "peekOfCode": "class NsregClickregSpider(scrapy.Spider):\n    name = \"nsreg_clickreg\"\n    allowed_domains = [\"www.clickreg.ru\"]\n    start_urls = [\"https://www.clickreg.ru/price/\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div[1]/div[3]/article/section/table[1]/tr/td[1]/article[1]/div/table/tr[5]/td[2]/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/div[1]/div[3]/article/section/table[1]/tr/td[1]/article[1]/div/table/tr[5]/td[3]/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/div[1]/div[3]/article/section/table[2]/tr/td[1]/article[2]/div/table/tr[10]/td[2]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickreg",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickreg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickreg",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregClickregSpider(scrapy.Spider):\n    name = \"nsreg_clickreg\"\n    allowed_domains = [\"www.clickreg.ru\"]\n    start_urls = [\"https://www.clickreg.ru/price/\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickreg",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickreg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickreg",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregClickregSpider(scrapy.Spider):\n    name = \"nsreg_clickreg\"\n    allowed_domains = [\"www.clickreg.ru\"]\n    start_urls = [\"https://www.clickreg.ru/price/\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clickreg",
        "documentation": {}
    },
    {
        "label": "NsregCloudySpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_cloudy",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_cloudy",
        "peekOfCode": "class NsregCloudySpider(scrapy.Spider):\n    name = 'nsreg_cloudy'\n    allowed_domains = ['cloudy.ru']\n    start_urls = ['https://cloudy.ru/#price']\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_cloudy",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_cloudy",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_cloudy",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+)\\s+₽.*\"\nname = \"ООО «Облако»\"\nclass NsregCloudySpider(scrapy.Spider):\n    name = 'nsreg_cloudy'\n    allowed_domains = ['cloudy.ru']\n    start_urls = ['https://cloudy.ru/#price']\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_cloudy",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_cloudy",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_cloudy",
        "peekOfCode": "name = \"ООО «Облако»\"\nclass NsregCloudySpider(scrapy.Spider):\n    name = 'nsreg_cloudy'\n    allowed_domains = ['cloudy.ru']\n    start_urls = ['https://cloudy.ru/#price']\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_cloudy",
        "documentation": {}
    },
    {
        "label": "NsregClusteredSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clustered",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clustered",
        "peekOfCode": "class NsregClusteredSpider(scrapy.Spider):\n    name = \"nsreg_clustered\"\n    allowed_domains = [\"clustered.ru\"]\n    start_urls = [\"https://clustered.ru/#price\"]\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clustered",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clustered",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clustered",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+)\\s+₽.*\"\nname = \"ООО «КЛАСТЕР»\"\nclass NsregClusteredSpider(scrapy.Spider):\n    name = \"nsreg_clustered\"\n    allowed_domains = [\"clustered.ru\"]\n    start_urls = [\"https://clustered.ru/#price\"]\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clustered",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clustered",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clustered",
        "peekOfCode": "name = \"ООО «КЛАСТЕР»\"\nclass NsregClusteredSpider(scrapy.Spider):\n    name = \"nsreg_clustered\"\n    allowed_domains = [\"clustered.ru\"]\n    start_urls = [\"https://clustered.ru/#price\"]\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_clustered",
        "documentation": {}
    },
    {
        "label": "NsregDatacitySpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_datacity",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_datacity",
        "peekOfCode": "class NsregDatacitySpider(scrapy.Spider):\n    name = \"nsreg_datacity\"\n    allowed_domains = [\"www.datacity.ru\"]\n    start_urls = [\"https://www.datacity.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_datacity",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_datacity",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_datacity",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDatacitySpider(scrapy.Spider):\n    name = \"nsreg_datacity\"\n    allowed_domains = [\"www.datacity.ru\"]\n    start_urls = [\"https://www.datacity.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_datacity",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_datacity",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_datacity",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDatacitySpider(scrapy.Spider):\n    name = \"nsreg_datacity\"\n    allowed_domains = [\"www.datacity.ru\"]\n    start_urls = [\"https://www.datacity.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_datacity",
        "documentation": {}
    },
    {
        "label": "NsregDataplusSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dataplus",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dataplus",
        "peekOfCode": "class NsregDataplusSpider(scrapy.Spider):\n    name = \"nsreg_dataplus\"\n    allowed_domains = [\"www.data-plus.ru\"]\n    start_urls = [\"https://www.data-plus.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dataplus",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dataplus",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dataplus",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDataplusSpider(scrapy.Spider):\n    name = \"nsreg_dataplus\"\n    allowed_domains = [\"www.data-plus.ru\"]\n    start_urls = [\"https://www.data-plus.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dataplus",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dataplus",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dataplus",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDataplusSpider(scrapy.Spider):\n    name = \"nsreg_dataplus\"\n    allowed_domains = [\"www.data-plus.ru\"]\n    start_urls = [\"https://www.data-plus.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dataplus",
        "documentation": {}
    },
    {
        "label": "NsregDnsSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dns",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dns",
        "peekOfCode": "class NsregDnsSpider(scrapy.Spider):\n    name = \"nsreg_dns\"\n    allowed_domains = [\"fastdns.ru\"]\n    start_urls = [\"https://fastdns.ru/#price\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div[1]/div[4]/div/div[2]/div[3]/div/div/div/div[2]/div/div/div[1]/div/table/tbody/tr[2]/td[2]/div/p/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/div[1]/div[4]/div/div[2]/div[3]/div/div/div/div[2]/div/div/div[1]/div/table/tbody/tr[3]/td[2]/div/p/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/div[1]/div[4]/div/div[2]/div[3]/div/div/div/div[2]/div/div/div[1]/div/table/tbody/tr[4]/td[2]/div/p/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dns",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dns",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dns",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+)\\s+₽.*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDnsSpider(scrapy.Spider):\n    name = \"nsreg_dns\"\n    allowed_domains = [\"fastdns.ru\"]\n    start_urls = [\"https://fastdns.ru/#price\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dns",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dns",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dns",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDnsSpider(scrapy.Spider):\n    name = \"nsreg_dns\"\n    allowed_domains = [\"fastdns.ru\"]\n    start_urls = [\"https://fastdns.ru/#price\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_dns",
        "documentation": {}
    },
    {
        "label": "NsregDomainSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domain",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domain",
        "peekOfCode": "class NsregDomainSpider(scrapy.Spider):\n    name = \"nsreg_domain\"\n    allowed_domains = [\"domain.ru\"]\n    start_urls = [\"https://domain.ru/site/tariffs\"]\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domain",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domain",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domain",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nname = \"ООО «Магазин Доменов»\"\nclass NsregDomainSpider(scrapy.Spider):\n    name = \"nsreg_domain\"\n    allowed_domains = [\"domain.ru\"]\n    start_urls = [\"https://domain.ru/site/tariffs\"]\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domain",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domain",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domain",
        "peekOfCode": "name = \"ООО «Магазин Доменов»\"\nclass NsregDomainSpider(scrapy.Spider):\n    name = \"nsreg_domain\"\n    allowed_domains = [\"domain.ru\"]\n    start_urls = [\"https://domain.ru/site/tariffs\"]\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domain",
        "documentation": {}
    },
    {
        "label": "NsregDomainagentSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainagent",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainagent",
        "peekOfCode": "class NsregDomainagentSpider(scrapy.Spider):\n    name = \"nsreg_domainagent\"\n    allowed_domains = [\"domainagent.ru\"]\n    start_urls = [\"https://domainagent.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainagent",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainagent",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainagent",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainagentSpider(scrapy.Spider):\n    name = \"nsreg_domainagent\"\n    allowed_domains = [\"domainagent.ru\"]\n    start_urls = [\"https://domainagent.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainagent",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainagent",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainagent",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainagentSpider(scrapy.Spider):\n    name = \"nsreg_domainagent\"\n    allowed_domains = [\"domainagent.ru\"]\n    start_urls = [\"https://domainagent.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainagent",
        "documentation": {}
    },
    {
        "label": "NsregDomainauctionSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainauction",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainauction",
        "peekOfCode": "class NsregDomainauctionSpider(scrapy.Spider):\n    name = 'nsreg_domainauction'\n    allowed_domains = ['domainauction.ru']\n    start_urls = ['https://domainauction.ru/site/tariffs/']\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainauction",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainauction",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainauction",
        "peekOfCode": "REGEX_PATTERN = r\"(([0-9]*[.,]?)?[0-9]{3}).*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainauctionSpider(scrapy.Spider):\n    name = 'nsreg_domainauction'\n    allowed_domains = ['domainauction.ru']\n    start_urls = ['https://domainauction.ru/site/tariffs/']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainauction",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainauction",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainauction",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainauctionSpider(scrapy.Spider):\n    name = 'nsreg_domainauction'\n    allowed_domains = ['domainauction.ru']\n    start_urls = ['https://domainauction.ru/site/tariffs/']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainauction",
        "documentation": {}
    },
    {
        "label": "NsregDomaingroupSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domaingroup",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domaingroup",
        "peekOfCode": "class NsregDomaingroupSpider(scrapy.Spider):\n    name = \"nsreg_domaingroup\"\n    allowed_domains = [\"domaingroup.ru\"]\n    start_urls = [\"https://domaingroup.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domaingroup",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domaingroup",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domaingroup",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomaingroupSpider(scrapy.Spider):\n    name = \"nsreg_domaingroup\"\n    allowed_domains = [\"domaingroup.ru\"]\n    start_urls = [\"https://domaingroup.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domaingroup",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domaingroup",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domaingroup",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomaingroupSpider(scrapy.Spider):\n    name = \"nsreg_domaingroup\"\n    allowed_domains = [\"domaingroup.ru\"]\n    start_urls = [\"https://domaingroup.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domaingroup",
        "documentation": {}
    },
    {
        "label": "NsregDomainhostingSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhosting",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhosting",
        "peekOfCode": "class NsregDomainhostingSpider(scrapy.Spider):\n    name = \"nsreg_domainhosting\"\n    allowed_domains = [\"www.domainshosting.ru\"]\n    start_urls = [\"https://www.domainshosting.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhosting",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhosting",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhosting",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainhostingSpider(scrapy.Spider):\n    name = \"nsreg_domainhosting\"\n    allowed_domains = [\"www.domainshosting.ru\"]\n    start_urls = [\"https://www.domainshosting.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhosting",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhosting",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhosting",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainhostingSpider(scrapy.Spider):\n    name = \"nsreg_domainhosting\"\n    allowed_domains = [\"www.domainshosting.ru\"]\n    start_urls = [\"https://www.domainshosting.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhosting",
        "documentation": {}
    },
    {
        "label": "NsregDomainhouseSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhouse",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhouse",
        "peekOfCode": "class NsregDomainhouseSpider(scrapy.Spider):\n    name = \"nsreg_domainhouse\"\n    allowed_domains = [\"domainhouse.ru\"]\n    start_urls = [\"https://domainhouse.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhouse",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhouse",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhouse",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainhouseSpider(scrapy.Spider):\n    name = \"nsreg_domainhouse\"\n    allowed_domains = [\"domainhouse.ru\"]\n    start_urls = [\"https://domainhouse.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhouse",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhouse",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhouse",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainhouseSpider(scrapy.Spider):\n    name = \"nsreg_domainhouse\"\n    allowed_domains = [\"domainhouse.ru\"]\n    start_urls = [\"https://domainhouse.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainhouse",
        "documentation": {}
    },
    {
        "label": "NsregDomainmasterSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainmaster",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainmaster",
        "peekOfCode": "class NsregDomainmasterSpider(scrapy.Spider):\n    name = \"nsreg_domainmaster\"\n    allowed_domains = [\"domainmaster.ru\"]\n    start_urls = [\"https://domainmaster.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainmaster",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainmaster",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainmaster",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainmasterSpider(scrapy.Spider):\n    name = \"nsreg_domainmaster\"\n    allowed_domains = [\"domainmaster.ru\"]\n    start_urls = [\"https://domainmaster.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainmaster",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainmaster",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainmaster",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainmasterSpider(scrapy.Spider):\n    name = \"nsreg_domainmaster\"\n    allowed_domains = [\"domainmaster.ru\"]\n    start_urls = [\"https://domainmaster.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainmaster",
        "documentation": {}
    },
    {
        "label": "NsregDomainplusSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainplus",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainplus",
        "peekOfCode": "class NsregDomainplusSpider(scrapy.Spider):\n    name = 'nsreg_domainplus'\n    allowed_domains = ['domainplus.ru']\n    start_urls = ['https://domainplus.ru/site/tariffs']\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainplus",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainplus",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainplus",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainplusSpider(scrapy.Spider):\n    name = 'nsreg_domainplus'\n    allowed_domains = ['domainplus.ru']\n    start_urls = ['https://domainplus.ru/site/tariffs']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainplus",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainplus",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainplus",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainplusSpider(scrapy.Spider):\n    name = 'nsreg_domainplus'\n    allowed_domains = ['domainplus.ru']\n    start_urls = ['https://domainplus.ru/site/tariffs']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainplus",
        "documentation": {}
    },
    {
        "label": "NsregDomainsSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domains",
        "peekOfCode": "class NsregDomainsSpider(scrapy.Spider):\n    name = \"nsreg_domains\"\n    allowed_domains = [\"domains.ru\"]\n    start_urls = [\"https://domains.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domains",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domains",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainsSpider(scrapy.Spider):\n    name = \"nsreg_domains\"\n    allowed_domains = [\"domains.ru\"]\n    start_urls = [\"https://domains.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domains",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domains",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainsSpider(scrapy.Spider):\n    name = \"nsreg_domains\"\n    allowed_domains = [\"domains.ru\"]\n    start_urls = [\"https://domains.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domains",
        "documentation": {}
    },
    {
        "label": "NsregDomainserviceSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainservice",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainservice",
        "peekOfCode": "class NsregDomainserviceSpider(scrapy.Spider):\n    name = \"nsreg_domainservice\"\n    allowed_domains = [\"domainservice.ru\"]\n    start_urls = [\"https://domainservice.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainservice",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainservice",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainservice",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainserviceSpider(scrapy.Spider):\n    name = \"nsreg_domainservice\"\n    allowed_domains = [\"domainservice.ru\"]\n    start_urls = [\"https://domainservice.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainservice",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainservice",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainservice",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainserviceSpider(scrapy.Spider):\n    name = \"nsreg_domainservice\"\n    allowed_domains = [\"domainservice.ru\"]\n    start_urls = [\"https://domainservice.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainservice",
        "documentation": {}
    },
    {
        "label": "NsregDomainshopSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainshop",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainshop",
        "peekOfCode": "class NsregDomainshopSpider(scrapy.Spider):\n    name = \"nsreg_domainshop\"\n    allowed_domains = [\"domainshop.ru\"]\n    start_urls = [\"https://domainshop.ru/services/\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div/div[2]/div/div/div/div/div[3]/div/div/div/div/table/tbody/tr[1]/td[2]/div/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/div/div[2]/div/div/div/div/div[3]/div/div/div/div/table/tbody/tr[4]/td[2]/div/p/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/div/div[2]/div/div/div/div/div[3]/div/div/div/div/table/tbody/tr[7]/td[2]/div/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainshop",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainshop",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainshop",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+)[.,\\s]?руб.*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainshopSpider(scrapy.Spider):\n    name = \"nsreg_domainshop\"\n    allowed_domains = [\"domainshop.ru\"]\n    start_urls = [\"https://domainshop.ru/services/\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainshop",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainshop",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainshop",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainshopSpider(scrapy.Spider):\n    name = \"nsreg_domainshop\"\n    allowed_domains = [\"domainshop.ru\"]\n    start_urls = [\"https://domainshop.ru/services/\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domainshop",
        "documentation": {}
    },
    {
        "label": "NsregDomainySpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domeny",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domeny",
        "peekOfCode": "class NsregDomainySpider(scrapy.Spider):\n    name = \"nsreg_domeny\"\n    allowed_domains = [\"domeny.ru\"]\n    start_urls = [\"https://domeny.ru/\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div[2]/div[1]/div[5]/div/div/div/div[3]/a[1]/h5/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        item = NsregItem()\n        item['name'] = \"ООО «Доменный Мастер»\"\n        price = item.get('price', EMPTY_PRICE)",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domeny",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domeny",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domeny",
        "peekOfCode": "REGEX_PATTERN = r\".*(([0-9]*[.,])?[0-9]{3})\\s+₽.*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainySpider(scrapy.Spider):\n    name = \"nsreg_domeny\"\n    allowed_domains = [\"domeny.ru\"]\n    start_urls = [\"https://domeny.ru/\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domeny",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domeny",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domeny",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomainySpider(scrapy.Spider):\n    name = \"nsreg_domeny\"\n    allowed_domains = [\"domeny.ru\"]\n    start_urls = [\"https://domeny.ru/\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domeny",
        "documentation": {}
    },
    {
        "label": "NsregDomhosyingaSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domhostinga",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domhostinga",
        "peekOfCode": "class NsregDomhosyingaSpider(scrapy.Spider):\n    name = \"nsreg_domhostinga\"\n    allowed_domains = [\"www.domhostinga.ru\"]\n    start_urls = [\"https://www.domhostinga.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domhostinga",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domhostinga",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domhostinga",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomhosyingaSpider(scrapy.Spider):\n    name = \"nsreg_domhostinga\"\n    allowed_domains = [\"www.domhostinga.ru\"]\n    start_urls = [\"https://www.domhostinga.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domhostinga",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domhostinga",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domhostinga",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregDomhosyingaSpider(scrapy.Spider):\n    name = \"nsreg_domhostinga\"\n    allowed_domains = [\"www.domhostinga.ru\"]\n    start_urls = [\"https://www.domhostinga.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_domhostinga",
        "documentation": {}
    },
    {
        "label": "NsregEasyhostingSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_easyhosting",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_easyhosting",
        "peekOfCode": "class NsregEasyhostingSpider(scrapy.Spider):\n    name = \"nsreg_easyhosting\"\n    allowed_domains = [\"www.easyhosting.ru\"]\n    start_urls = [\"https://www.easyhosting.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_easyhosting",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_easyhosting",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_easyhosting",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregEasyhostingSpider(scrapy.Spider):\n    name = \"nsreg_easyhosting\"\n    allowed_domains = [\"www.easyhosting.ru\"]\n    start_urls = [\"https://www.easyhosting.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_easyhosting",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_easyhosting",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_easyhosting",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregEasyhostingSpider(scrapy.Spider):\n    name = \"nsreg_easyhosting\"\n    allowed_domains = [\"www.easyhosting.ru\"]\n    start_urls = [\"https://www.easyhosting.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_easyhosting",
        "documentation": {}
    },
    {
        "label": "NsregGetnetSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_getnet",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_getnet",
        "peekOfCode": "class NsregGetnetSpider(scrapy.Spider):\n    name = \"nsreg_getnet\"\n    allowed_domains = [\"format.gtn.ee\"]\n    start_urls = [\"https://format.gtn.ee/price\"]\n    def parse(self, response):\n        pricereg = response.xpath('//table[class=\"tbl-bordered\"]').get()\n        pricereg = find_price_withoutre(pricereg)\n        priceprolong = response.xpath('//tbody/tr[3]/td[2]/text()').get()\n        priceprolong = find_price_withoutre(priceprolong)\n        pricechange = response.xpath('//tbody/tr[4]/td[2]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_getnet",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_getnet",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_getnet",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregGetnetSpider(scrapy.Spider):\n    name = \"nsreg_getnet\"\n    allowed_domains = [\"format.gtn.ee\"]\n    start_urls = [\"https://format.gtn.ee/price\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_getnet",
        "documentation": {}
    },
    {
        "label": "NsregGigahostingSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_gigahosting",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_gigahosting",
        "peekOfCode": "class NsregGigahostingSpider(scrapy.Spider):\n    name = \"nsreg_gigahosting\"\n    allowed_domains = [\"www.gigahosting.ru\"]\n    start_urls = [\"https://www.gigahosting.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_gigahosting",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_gigahosting",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_gigahosting",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregGigahostingSpider(scrapy.Spider):\n    name = \"nsreg_gigahosting\"\n    allowed_domains = [\"www.gigahosting.ru\"]\n    start_urls = [\"https://www.gigahosting.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_gigahosting",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_gigahosting",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_gigahosting",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregGigahostingSpider(scrapy.Spider):\n    name = \"nsreg_gigahosting\"\n    allowed_domains = [\"www.gigahosting.ru\"]\n    start_urls = [\"https://www.gigahosting.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_gigahosting",
        "documentation": {}
    },
    {
        "label": "NsregKlondikeSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_klondike",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_klondike",
        "peekOfCode": "class NsregKlondikeSpider(scrapy.Spider):\n    name = \"nsreg_klondike\"\n    allowed_domains = [\"klondike-studio.ru\"]\n    start_urls = [\"https://klondike-studio.ru/domain/prices/\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div[2]/section/div/div/table/tbody/tr[1]/td[2]/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/div[2]/section/div/div/table/tbody/tr[3]/td[2]/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/div[2]/section/div/div/table/tbody/tr[5]/td[2]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_klondike",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_klondike",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_klondike",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+)[.,\\s]?руб.*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregKlondikeSpider(scrapy.Spider):\n    name = \"nsreg_klondike\"\n    allowed_domains = [\"klondike-studio.ru\"]\n    start_urls = [\"https://klondike-studio.ru/domain/prices/\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_klondike",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_klondike",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_klondike",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregKlondikeSpider(scrapy.Spider):\n    name = \"nsreg_klondike\"\n    allowed_domains = [\"klondike-studio.ru\"]\n    start_urls = [\"https://klondike-studio.ru/domain/prices/\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_klondike",
        "documentation": {}
    },
    {
        "label": "NsregMasterhostSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_masterhost",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_masterhost",
        "peekOfCode": "class NsregMasterhostSpider(scrapy.Spider):\n    name = \"nsreg_masterhost\"\n    allowed_domains = [\"masterhost.ru\"]\n    start_urls = [\"https://masterhost.ru/domain/price/\"]\n    def parse(self, response):\n        pricereg = response.xpath('//*[@id=\"app\"]/section[1]/div[1]/div[2]/div[1]/div[1]/div/div/div[2]/div[2]/span/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('//*[@id=\"app\"]/section[1]/div[1]/div[2]/div[1]/div[1]/div/div/div[2]/div[3]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = None",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_masterhost",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_masterhost",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_masterhost",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregMasterhostSpider(scrapy.Spider):\n    name = \"nsreg_masterhost\"\n    allowed_domains = [\"masterhost.ru\"]\n    start_urls = [\"https://masterhost.ru/domain/price/\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_masterhost",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_masterhost",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_masterhost",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregMasterhostSpider(scrapy.Spider):\n    name = \"nsreg_masterhost\"\n    allowed_domains = [\"masterhost.ru\"]\n    start_urls = [\"https://masterhost.ru/domain/price/\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_masterhost",
        "documentation": {}
    },
    {
        "label": "NsregMegahostSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_megahost",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_megahost",
        "peekOfCode": "class NsregMegahostSpider(scrapy.Spider):\n    name = 'nsreg_megahost'\n    allowed_domains = ['megahost.ru']\n    start_urls = ['http://megahost.ru/']\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_megahost",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_megahost",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_megahost",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+)\\s+₽.*\"\nname = \"ООО «Мега»\"\nclass NsregMegahostSpider(scrapy.Spider):\n    name = 'nsreg_megahost'\n    allowed_domains = ['megahost.ru']\n    start_urls = ['http://megahost.ru/']\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_megahost",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_megahost",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_megahost",
        "peekOfCode": "name = \"ООО «Мега»\"\nclass NsregMegahostSpider(scrapy.Spider):\n    name = 'nsreg_megahost'\n    allowed_domains = ['megahost.ru']\n    start_urls = ['http://megahost.ru/']\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_megahost",
        "documentation": {}
    },
    {
        "label": "NsregMirdomenovSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirdomenov",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirdomenov",
        "peekOfCode": "class NsregMirdomenovSpider(scrapy.Spider):\n    name = \"nsreg_mirdomenov\"\n    allowed_domains = [\"mirdomenov.ru\"]\n    start_urls = [\"https://mirdomenov.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirdomenov",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirdomenov",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirdomenov",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregMirdomenovSpider(scrapy.Spider):\n    name = \"nsreg_mirdomenov\"\n    allowed_domains = [\"mirdomenov.ru\"]\n    start_urls = [\"https://mirdomenov.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirdomenov",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirdomenov",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirdomenov",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregMirdomenovSpider(scrapy.Spider):\n    name = \"nsreg_mirdomenov\"\n    allowed_domains = [\"mirdomenov.ru\"]\n    start_urls = [\"https://mirdomenov.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirdomenov",
        "documentation": {}
    },
    {
        "label": "NsregMirhostingaSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirhostinga",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirhostinga",
        "peekOfCode": "class NsregMirhostingaSpider(scrapy.Spider):\n    name = 'nsreg_mirhostinga'\n    allowed_domains = ['www.mirhostinga.ru']\n    start_urls = ['https://www.mirhostinga.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirhostinga",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirhostinga",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirhostinga",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nname = \"ООО «Мир Хостинга»\"\nclass NsregMirhostingaSpider(scrapy.Spider):\n    name = 'nsreg_mirhostinga'\n    allowed_domains = ['www.mirhostinga.ru']\n    start_urls = ['https://www.mirhostinga.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirhostinga",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirhostinga",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirhostinga",
        "peekOfCode": "name = \"ООО «Мир Хостинга»\"\nclass NsregMirhostingaSpider(scrapy.Spider):\n    name = 'nsreg_mirhostinga'\n    allowed_domains = ['www.mirhostinga.ru']\n    start_urls = ['https://www.mirhostinga.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mirhostinga",
        "documentation": {}
    },
    {
        "label": "NsregMstciSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mstci",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mstci",
        "peekOfCode": "class NsregMstciSpider(scrapy.Spider):\n    name = \"nsreg_mstci\"\n    allowed_domains = [\"mstci.ru\"]\n    start_urls = [\"https://mstci.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mstci",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mstci",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mstci",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregMstciSpider(scrapy.Spider):\n    name = \"nsreg_mstci\"\n    allowed_domains = [\"mstci.ru\"]\n    start_urls = [\"https://mstci.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mstci",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mstci",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mstci",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregMstciSpider(scrapy.Spider):\n    name = \"nsreg_mstci\"\n    allowed_domains = [\"mstci.ru\"]\n    start_urls = [\"https://mstci.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_mstci",
        "documentation": {}
    },
    {
        "label": "NsregMultieregSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_multiereg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_multiereg",
        "peekOfCode": "class NsregMultieregSpider(scrapy.Spider):\n    name = 'nsreg_multiereg'\n    allowed_domains = ['www.multireg.ru']\n    start_urls = ['https://www.multireg.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_multiereg",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_multiereg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_multiereg",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nname = \"ООО «Мультирег»\"\nclass NsregMultieregSpider(scrapy.Spider):\n    name = 'nsreg_multiereg'\n    allowed_domains = ['www.multireg.ru']\n    start_urls = ['https://www.multireg.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_multiereg",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_multiereg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_multiereg",
        "peekOfCode": "name = \"ООО «Мультирег»\"\nclass NsregMultieregSpider(scrapy.Spider):\n    name = 'nsreg_multiereg'\n    allowed_domains = ['www.multireg.ru']\n    start_urls = ['https://www.multireg.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_multiereg",
        "documentation": {}
    },
    {
        "label": "NsregNetdataSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_netdata",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_netdata",
        "peekOfCode": "class NsregNetdataSpider(scrapy.Spider):\n    name = 'nsreg_netdata'\n    allowed_domains = ['www.netdata.ru']\n    start_urls = ['https://www.netdata.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_netdata",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_netdata",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_netdata",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nname = \"ООО «НэтДата»\"\nclass NsregNetdataSpider(scrapy.Spider):\n    name = 'nsreg_netdata'\n    allowed_domains = ['www.netdata.ru']\n    start_urls = ['https://www.netdata.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_netdata",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_netdata",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_netdata",
        "peekOfCode": "name = \"ООО «НэтДата»\"\nclass NsregNetdataSpider(scrapy.Spider):\n    name = 'nsreg_netdata'\n    allowed_domains = ['www.netdata.ru']\n    start_urls = ['https://www.netdata.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_netdata",
        "documentation": {}
    },
    {
        "label": "NsregNicSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_nic",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_nic",
        "peekOfCode": "class NsregNicSpider(scrapy.Spider):\n    name = \"nsreg_nic\"\n    allowed_domains = [\"www.nic.ru\"]\n    start_urls = [\"https://www.nic.ru/catalog/domains/ru/\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div[1]/div/div/section/div[2]/div/div/p[4]/strong/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = None\n        pricechange = response.xpath('/html/body/div[1]/div/div/section/div[2]/div/div/p[6]/strong/text()').get()\n        pricechange = find_price(REGEX_PATTERN, pricechange)",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_nic",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_nic",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_nic",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб[.]\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregNicSpider(scrapy.Spider):\n    name = \"nsreg_nic\"\n    allowed_domains = [\"www.nic.ru\"]\n    start_urls = [\"https://www.nic.ru/catalog/domains/ru/\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_nic",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_nic",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_nic",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregNicSpider(scrapy.Spider):\n    name = \"nsreg_nic\"\n    allowed_domains = [\"www.nic.ru\"]\n    start_urls = [\"https://www.nic.ru/catalog/domains/ru/\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_nic",
        "documentation": {}
    },
    {
        "label": "NsregPrivatedomainsSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_privatedomains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_privatedomains",
        "peekOfCode": "class NsregPrivatedomainsSpider(scrapy.Spider):\n    name = \"nsreg_privatedomains\"\n    allowed_domains = [\"privatedomains.ru\"]\n    start_urls = [\"https://privatedomains.ru/site/tariffs\"]\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_privatedomains",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_privatedomains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_privatedomains",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nname = \"ООО «Приват Домэйнс»\"\nclass NsregPrivatedomainsSpider(scrapy.Spider):\n    name = \"nsreg_privatedomains\"\n    allowed_domains = [\"privatedomains.ru\"]\n    start_urls = [\"https://privatedomains.ru/site/tariffs\"]\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_privatedomains",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_privatedomains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_privatedomains",
        "peekOfCode": "name = \"ООО «Приват Домэйнс»\"\nclass NsregPrivatedomainsSpider(scrapy.Spider):\n    name = \"nsreg_privatedomains\"\n    allowed_domains = [\"privatedomains.ru\"]\n    start_urls = [\"https://privatedomains.ru/site/tariffs\"]\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_privatedomains",
        "documentation": {}
    },
    {
        "label": "NsregR01Spider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_r01",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_r01",
        "peekOfCode": "class NsregR01Spider(scrapy.Spider):\n    name = 'nsreg_r01'\n    allowed_domains = ['r01.ru']\n    start_urls = ['https://r01.ru/domain/pay/']\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/table/tr[2]/td[2]/table/tr[4]/td[2]/text()').get()\n        pricereg = find_price_withoutre(pricereg)\n        priceprolong = response.xpath('/html/body/table/tr[2]/td[2]/table/tr[4]/td[3]/text()').get()\n        priceprolong = find_price_withoutre(priceprolong)\n        pricechange = response.xpath('/html/body/table/tr[2]/td[2]/table/tr[4]/td[4]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_r01",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_r01",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_r01",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregR01Spider(scrapy.Spider):\n    name = 'nsreg_r01'\n    allowed_domains = ['r01.ru']\n    start_urls = ['https://r01.ru/domain/pay/']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_r01",
        "documentation": {}
    },
    {
        "label": "NsregRfSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_rf",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_rf",
        "peekOfCode": "class NsregRfSpider(scrapy.Spider):\n    name = \"nsreg_rf\"\n    allowed_domains = [\"rf.ru\"]\n    start_urls = [\"https://rf.ru/domain-prices\"]\n    def parse(self, response):\n        pricereg = response.xpath('//*[@id=\"wrapper\"]/section[1]/div/table/tbody/tr[1]/td[2]/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('//*[@id=\"wrapper\"]/section[1]/div/table/tbody/tr[1]/td[3]/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('//*[@id=\"wrapper\"]/section[1]/div/table/tbody/tr[1]/td[4]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_rf",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_rf",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_rf",
        "peekOfCode": "REGEX_PATTERN = r\".*(([0-9]*[.,])?[0-9]{3})₽.*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregRfSpider(scrapy.Spider):\n    name = \"nsreg_rf\"\n    allowed_domains = [\"rf.ru\"]\n    start_urls = [\"https://rf.ru/domain-prices\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_rf",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_rf",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_rf",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregRfSpider(scrapy.Spider):\n    name = \"nsreg_rf\"\n    allowed_domains = [\"rf.ru\"]\n    start_urls = [\"https://rf.ru/domain-prices\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_rf",
        "documentation": {}
    },
    {
        "label": "NsregSafeSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_safe",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_safe",
        "peekOfCode": "class NsregSafeSpider(scrapy.Spider):\n    name = 'nsreg_safe'\n    allowed_domains = ['www.safereg.ru']\n    start_urls = ['https://www.safereg.ru/site/tariffs']\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_safe",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_safe",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_safe",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]{3,}).*\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregSafeSpider(scrapy.Spider):\n    name = 'nsreg_safe'\n    allowed_domains = ['www.safereg.ru']\n    start_urls = ['https://www.safereg.ru/site/tariffs']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_safe",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_safe",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_safe",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregSafeSpider(scrapy.Spider):\n    name = 'nsreg_safe'\n    allowed_domains = ['www.safereg.ru']\n    start_urls = ['https://www.safereg.ru/site/tariffs']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_safe",
        "documentation": {}
    },
    {
        "label": "NsregSalenamesSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_salenames",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_salenames",
        "peekOfCode": "class NsregSalenamesSpider(scrapy.Spider):\n    name = 'nsreg_salenames'\n    allowed_domains = ['www.salenames.ru']\n    start_urls = ['https://www.salenames.ru/ru/page/tarify']\n    def parse(self, response):\n        pricereg = response.xpath('//*[@id=\"content\"]/div/div/table[1]/tbody/tr[1]/td[2]/text()').get()\n        pricereg = find_price_withoutre(pricereg)\n        priceprolong = response.xpath('//*[@id=\"content\"]/div/div/table[1]/tbody/tr[2]/td[2]/text()').get()\n        priceprolong = find_price_withoutre(priceprolong)\n        pricechange = response.xpath('//*[@id=\"content\"]/div/div/table[1]/tbody/tr[3]/td[2]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_salenames",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_salenames",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_salenames",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregSalenamesSpider(scrapy.Spider):\n    name = 'nsreg_salenames'\n    allowed_domains = ['www.salenames.ru']\n    start_urls = ['https://www.salenames.ru/ru/page/tarify']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_salenames",
        "documentation": {}
    },
    {
        "label": "NsregSmartdomainsSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_smartdomains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_smartdomains",
        "peekOfCode": "class NsregSmartdomainsSpider(scrapy.Spider):\n    name = 'nsreg_smartdomains'\n    allowed_domains = ['smartdomains.ru']\n    start_urls = ['https://smartdomains.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_smartdomains",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_smartdomains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_smartdomains",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nname = \"ООО «Смарт Домэйнс»\"\nclass NsregSmartdomainsSpider(scrapy.Spider):\n    name = 'nsreg_smartdomains'\n    allowed_domains = ['smartdomains.ru']\n    start_urls = ['https://smartdomains.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_smartdomains",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_smartdomains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_smartdomains",
        "peekOfCode": "name = \"ООО «Смарт Домэйнс»\"\nclass NsregSmartdomainsSpider(scrapy.Spider):\n    name = 'nsreg_smartdomains'\n    allowed_domains = ['smartdomains.ru']\n    start_urls = ['https://smartdomains.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_smartdomains",
        "documentation": {}
    },
    {
        "label": "NsregSpacewebdomainsSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_spacewebdomains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_spacewebdomains",
        "peekOfCode": "class NsregSpacewebdomainsSpider(scrapy.Spider):\n    name = 'nsreg_spacewebdomains'\n    allowed_domains = ['spacewebdomains.ru']\n    start_urls = ['https://spacewebdomains.ru/%D1%82%D0%B0%D1%80%D0%B8%D1%84%D1%8B/']\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div[1]/div/div[1]/main/article/div/div/figure/table/tbody/tr[2]/td[2]/text()').get()\n        pricereg = find_price_withoutre(pricereg)\n        priceprolong = response.xpath('/html/body/div[1]/div/div[1]/main/article/div/div/figure/table/tbody/tr[3]/td[2]/text()').get()\n        priceprolong = find_price_withoutre(priceprolong)\n        pricechange = response.xpath('/html/body/div[1]/div/div[1]/main/article/div/div/figure/table/tbody/tr[4]/td[2]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_spacewebdomains",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_spacewebdomains",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_spacewebdomains",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregSpacewebdomainsSpider(scrapy.Spider):\n    name = 'nsreg_spacewebdomains'\n    allowed_domains = ['spacewebdomains.ru']\n    start_urls = ['https://spacewebdomains.ru/%D1%82%D0%B0%D1%80%D0%B8%D1%84%D1%8B/']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_spacewebdomains",
        "documentation": {}
    },
    {
        "label": "NsregSpeedhostingSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_speedhosting",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_speedhosting",
        "peekOfCode": "class NsregSpeedhostingSpider(scrapy.Spider):\n    name = 'nsreg_speedhosting'\n    allowed_domains = ['www.speedhosting.ru']\n    start_urls = ['https://www.speedhosting.ru/site/tariffs']\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_speedhosting",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_speedhosting",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_speedhosting",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregSpeedhostingSpider(scrapy.Spider):\n    name = 'nsreg_speedhosting'\n    allowed_domains = ['www.speedhosting.ru']\n    start_urls = ['https://www.speedhosting.ru/site/tariffs']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_speedhosting",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_speedhosting",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_speedhosting",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregSpeedhostingSpider(scrapy.Spider):\n    name = 'nsreg_speedhosting'\n    allowed_domains = ['www.speedhosting.ru']\n    start_urls = ['https://www.speedhosting.ru/site/tariffs']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_speedhosting",
        "documentation": {}
    },
    {
        "label": "NSRegSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_spider",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_spider",
        "peekOfCode": "class NSRegSpider(scrapy.Spider):\n    name = \"nsreg\"\n    start_urls = [\n        'https://cctld.ru/domains/reg/',\n    ]\n    def parse(self, response):\n        for reg in response.xpath('//*[@id=\"registrator-list\"]/div/div'):\n            item = NsregItem()\n            item['name'] = reg.xpath('div/span[1]/span[1]/span/text()').get()\n            item['note1'] = reg.xpath('div/span[1]/span[2]/span[1]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_spider",
        "documentation": {}
    },
    {
        "label": "NsregStartmailSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_startmail",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_startmail",
        "peekOfCode": "class NsregStartmailSpider(scrapy.Spider):\n    name = \"nsreg_startmail\"\n    allowed_domains = [\"startmail.ru\"]\n    start_urls = [\"https://startmail.ru/#price\"]\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_startmail",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_startmail",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_startmail",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+)\\s+₽.*\"\nname = \"ООО «ПОЧТА»\"\nclass NsregStartmailSpider(scrapy.Spider):\n    name = \"nsreg_startmail\"\n    allowed_domains = [\"startmail.ru\"]\n    start_urls = [\"https://startmail.ru/#price\"]\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_startmail",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_startmail",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_startmail",
        "peekOfCode": "name = \"ООО «ПОЧТА»\"\nclass NsregStartmailSpider(scrapy.Spider):\n    name = \"nsreg_startmail\"\n    allowed_domains = [\"startmail.ru\"]\n    start_urls = [\"https://startmail.ru/#price\"]\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_startmail",
        "documentation": {}
    },
    {
        "label": "NsregStepmediaSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_stepmedia",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_stepmedia",
        "peekOfCode": "class NsregStepmediaSpider(scrapy.Spider):\n    name = 'nsreg_stepmedia'\n    allowed_domains = ['www.sm-domains.ru']\n    start_urls = ['https://www.sm-domains.ru/price/']\n    def parse(self, response):\n        item = moscow_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_stepmedia",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_stepmedia",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_stepmedia",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nname = \"ООО «РЕНТЕР.РУ»\"\nclass NsregStepmediaSpider(scrapy.Spider):\n    name = 'nsreg_stepmedia'\n    allowed_domains = ['www.sm-domains.ru']\n    start_urls = ['https://www.sm-domains.ru/price/']\n    def parse(self, response):\n        item = moscow_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_stepmedia",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_stepmedia",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_stepmedia",
        "peekOfCode": "name = \"ООО «РЕНТЕР.РУ»\"\nclass NsregStepmediaSpider(scrapy.Spider):\n    name = 'nsreg_stepmedia'\n    allowed_domains = ['www.sm-domains.ru']\n    start_urls = ['https://www.sm-domains.ru/price/']\n    def parse(self, response):\n        item = moscow_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_stepmedia",
        "documentation": {}
    },
    {
        "label": "NsregTechnodataSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_technodata",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_technodata",
        "peekOfCode": "class NsregTechnodataSpider(scrapy.Spider):\n    name = 'nsreg_technodata'\n    allowed_domains = ['www.technodata.ru']\n    start_urls = ['https://www.technodata.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_technodata",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_technodata",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_technodata",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nname = \"ООО «Техно Дата»\"\nclass NsregTechnodataSpider(scrapy.Spider):\n    name = 'nsreg_technodata'\n    allowed_domains = ['www.technodata.ru']\n    start_urls = ['https://www.technodata.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_technodata",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_technodata",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_technodata",
        "peekOfCode": "name = \"ООО «Техно Дата»\"\nclass NsregTechnodataSpider(scrapy.Spider):\n    name = 'nsreg_technodata'\n    allowed_domains = ['www.technodata.ru']\n    start_urls = ['https://www.technodata.ru/site/tariffs']\n    def parse(self, response):\n        item = moscow_tariffs(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_technodata",
        "documentation": {}
    },
    {
        "label": "NsregThecodeSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_thecode",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_thecode",
        "peekOfCode": "class NsregThecodeSpider(scrapy.Spider):\n    name = \"nsreg_thecode\"\n    allowed_domains = [\"thecode.ru\"]\n    start_urls = [\"https://thecode.ru/#price\"]\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_thecode",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_thecode",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_thecode",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+)\\s+₽.*\"\nname = \"ООО «КОД»\"\nclass NsregThecodeSpider(scrapy.Spider):\n    name = \"nsreg_thecode\"\n    allowed_domains = [\"thecode.ru\"]\n    start_urls = [\"https://thecode.ru/#price\"]\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_thecode",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_thecode",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_thecode",
        "peekOfCode": "name = \"ООО «КОД»\"\nclass NsregThecodeSpider(scrapy.Spider):\n    name = \"nsreg_thecode\"\n    allowed_domains = [\"thecode.ru\"]\n    start_urls = [\"https://thecode.ru/#price\"]\n    def parse(self, response):\n        item = moscow_rich_price(self, response, REGEX_PATTERN, name)\n        yield item",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_thecode",
        "documentation": {}
    },
    {
        "label": "NsregUninicSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_uninic",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_uninic",
        "peekOfCode": "class NsregUninicSpider(scrapy.Spider):\n    name = 'nsreg_uninic'\n    allowed_domains = ['uninic.ru']\n    start_urls = ['https://uninic.ru/domainreg.php']\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div[1]/div/div[2]/div[1]/div/div/div[3]/table/tr[2]/td[3]/b[1]/text()').get()\n        pricereg = find_price_withoutre(pricereg)\n        priceprolong = response.xpath('/html/body/div[1]/div/div[2]/div[1]/div/div/div[3]/table/tr[2]/td[5]/b[1]/text()').get()\n        priceprolong = find_price_withoutre(priceprolong)\n        pricechange = None",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_uninic",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_uninic",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_uninic",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregUninicSpider(scrapy.Spider):\n    name = 'nsreg_uninic'\n    allowed_domains = ['uninic.ru']\n    start_urls = ['https://uninic.ru/domainreg.php']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_uninic",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_uninic",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_uninic",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregUninicSpider(scrapy.Spider):\n    name = 'nsreg_uninic'\n    allowed_domains = ['uninic.ru']\n    start_urls = ['https://uninic.ru/domainreg.php']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_uninic",
        "documentation": {}
    },
    {
        "label": "NsregWebregSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_webreg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_webreg",
        "peekOfCode": "class NsregWebregSpider(scrapy.Spider):\n    name = 'nsreg_webreg'\n    allowed_domains = ['www.webreg24.ru']\n    start_urls = ['https://www.webreg24.ru/price/']\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/div[1]/div[3]/article/section/table[1]/tr/td[1]/article[1]/div/table/tr[5]/td[2]/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/div[1]/div[3]/article/section/table[1]/tr/td[1]/article[1]/div/table/tr[5]/td[3]/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/div[1]/div[3]/article/section/table[2]/tr/td[1]/article[2]/div/table/tr[10]/td[2]/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_webreg",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_webreg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_webreg",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregWebregSpider(scrapy.Spider):\n    name = 'nsreg_webreg'\n    allowed_domains = ['www.webreg24.ru']\n    start_urls = ['https://www.webreg24.ru/price/']",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_webreg",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_webreg",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_webreg",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregWebregSpider(scrapy.Spider):\n    name = 'nsreg_webreg'\n    allowed_domains = ['www.webreg24.ru']\n    start_urls = ['https://www.webreg24.ru/price/']\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_webreg",
        "documentation": {}
    },
    {
        "label": "NsregZonadomenovSpider",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_zonadomenov",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_zonadomenov",
        "peekOfCode": "class NsregZonadomenovSpider(scrapy.Spider):\n    name = \"nsreg_zonadomenov\"\n    allowed_domains = [\"zonadomenov.ru\"]\n    start_urls = [\"https://zonadomenov.ru/site/tariffs\"]\n    def parse(self, response):\n        pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n        pricereg = find_price(REGEX_PATTERN, pricereg)\n        priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n        priceprolong = find_price(REGEX_PATTERN, priceprolong)\n        pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_zonadomenov",
        "documentation": {}
    },
    {
        "label": "REGEX_PATTERN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_zonadomenov",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_zonadomenov",
        "peekOfCode": "REGEX_PATTERN = r\"([0-9]+[.,\\s])?руб\"\nEMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregZonadomenovSpider(scrapy.Spider):\n    name = \"nsreg_zonadomenov\"\n    allowed_domains = [\"zonadomenov.ru\"]\n    start_urls = [\"https://zonadomenov.ru/site/tariffs\"]",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_zonadomenov",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_zonadomenov",
        "description": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_zonadomenov",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\nclass NsregZonadomenovSpider(scrapy.Spider):\n    name = \"nsreg_zonadomenov\"\n    allowed_domains = [\"zonadomenov.ru\"]\n    start_urls = [\"https://zonadomenov.ru/site/tariffs\"]\n    def parse(self, response):",
        "detail": "nsreg-watcher.src.grabber.nsreg.spiders.nsreg_zonadomenov",
        "documentation": {}
    },
    {
        "label": "NsregItem",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.items",
        "description": "nsreg-watcher.src.grabber.nsreg.items",
        "peekOfCode": "class NsregItem(scrapy.Item):\n    # define the fields for your item here like:\n    name = scrapy.Field()\n    note1 = scrapy.Field()\n    note2 = scrapy.Field()\n    city = scrapy.Field()\n    website = scrapy.Field()\n    price = scrapy.Field()",
        "detail": "nsreg-watcher.src.grabber.nsreg.items",
        "documentation": {}
    },
    {
        "label": "NsregSpiderMiddleware",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.middlewares",
        "description": "nsreg-watcher.src.grabber.nsreg.middlewares",
        "peekOfCode": "class NsregSpiderMiddleware:\n    # Not all methods need to be defined. If a method is not defined,\n    # scrapy acts as if the spider middleware does not modify the\n    # passed objects.\n    @classmethod\n    def from_crawler(cls, crawler):\n        # This method is used by Scrapy to create your spiders.\n        s = cls()\n        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)\n        return s",
        "detail": "nsreg-watcher.src.grabber.nsreg.middlewares",
        "documentation": {}
    },
    {
        "label": "NsregDownloaderMiddleware",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.middlewares",
        "description": "nsreg-watcher.src.grabber.nsreg.middlewares",
        "peekOfCode": "class NsregDownloaderMiddleware:\n    # Not all methods need to be defined. If a method is not defined,\n    # scrapy acts as if the downloader middleware does not modify the\n    # passed objects.\n    @classmethod\n    def from_crawler(cls, crawler):\n        # This method is used by Scrapy to create your spiders.\n        s = cls()\n        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)\n        return s",
        "detail": "nsreg-watcher.src.grabber.nsreg.middlewares",
        "documentation": {}
    },
    {
        "label": "NsregPipeline",
        "kind": 6,
        "importPath": "nsreg-watcher.src.grabber.nsreg.pipelines",
        "description": "nsreg-watcher.src.grabber.nsreg.pipelines",
        "peekOfCode": "class NsregPipeline:\n    def __init__(self):\n        hostname = 'localhost'\n        username = 'nsreg'\n        password = 'Nsreg123' # your password\n        database = 'nsreg'\n        port = '50432'\n        ## Create/Connect to database\n        self.connection = psycopg2.connect(host=hostname, user=username, password=password, dbname=database, port=port)\n        ## Create cursor, used to execute commands",
        "detail": "nsreg-watcher.src.grabber.nsreg.pipelines",
        "documentation": {}
    },
    {
        "label": "SQL_CREATE_REGCOMP_TABLE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.pipelines",
        "description": "nsreg-watcher.src.grabber.nsreg.pipelines",
        "peekOfCode": "SQL_CREATE_REGCOMP_TABLE = '''\nCREATE TABLE IF NOT EXISTS regcomp(\n            id serial PRIMARY KEY, \n            name VARCHAR(255) UNIQUE,\n            note1 text,\n            note2 text,\n            city VARCHAR(255),\n            website text, \n            pricereg decimal, \n            priceprolong decimal, ",
        "detail": "nsreg-watcher.src.grabber.nsreg.pipelines",
        "documentation": {}
    },
    {
        "label": "SQL_UPDATE_REGCOMP",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.pipelines",
        "description": "nsreg-watcher.src.grabber.nsreg.pipelines",
        "peekOfCode": "SQL_UPDATE_REGCOMP = '''\nINSERT INTO regcomp (name, note1, note2, city, website, pricereg, priceprolong, pricechange) \nVALUES (%s,%s,%s,%s,%s,%s,%s,%s) \nON CONFLICT (name) DO UPDATE\nSET ( note1, note2, city, website, pricereg, priceprolong, pricechange) =    (\n    COALESCE(%s, regcomp.note1),\n    COALESCE(%s, regcomp.note2),\n    COALESCE(%s, regcomp.city),\n    COALESCE(%s, regcomp.website),\n    COALESCE(%s, regcomp.pricereg),",
        "detail": "nsreg-watcher.src.grabber.nsreg.pipelines",
        "documentation": {}
    },
    {
        "label": "GRABBER_DIR",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "GRABBER_DIR = Path(__file__).resolve().parent.parent\nPROJECT_DIR = GRABBER_DIR.parent.parent\nBOT_NAME = 'nsreg'\nSPIDER_MODULES = ['nsreg.spiders']\nNEWSPIDER_MODULE = 'nsreg.spiders'\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n#USER_AGENT = 'nsreg (+http://www.yourdomain.com)'\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n# Configure maximum concurrent requests performed by Scrapy (default: 16)",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "PROJECT_DIR",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "PROJECT_DIR = GRABBER_DIR.parent.parent\nBOT_NAME = 'nsreg'\nSPIDER_MODULES = ['nsreg.spiders']\nNEWSPIDER_MODULE = 'nsreg.spiders'\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n#USER_AGENT = 'nsreg (+http://www.yourdomain.com)'\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n#CONCURRENT_REQUESTS = 32",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "BOT_NAME",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "BOT_NAME = 'nsreg'\nSPIDER_MODULES = ['nsreg.spiders']\nNEWSPIDER_MODULE = 'nsreg.spiders'\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n#USER_AGENT = 'nsreg (+http://www.yourdomain.com)'\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n#CONCURRENT_REQUESTS = 32\n# Configure a delay for requests for the same website (default: 0)",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "SPIDER_MODULES",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "SPIDER_MODULES = ['nsreg.spiders']\nNEWSPIDER_MODULE = 'nsreg.spiders'\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n#USER_AGENT = 'nsreg (+http://www.yourdomain.com)'\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n#CONCURRENT_REQUESTS = 32\n# Configure a delay for requests for the same website (default: 0)\n# See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "NEWSPIDER_MODULE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "NEWSPIDER_MODULE = 'nsreg.spiders'\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n#USER_AGENT = 'nsreg (+http://www.yourdomain.com)'\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n#CONCURRENT_REQUESTS = 32\n# Configure a delay for requests for the same website (default: 0)\n# See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#USER_AGENT",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#USER_AGENT = 'nsreg (+http://www.yourdomain.com)'\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n#CONCURRENT_REQUESTS = 32\n# Configure a delay for requests for the same website (default: 0)\n# See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\nDOWNLOAD_DELAY = 0.25\n# The download delay setting will honor only one of:",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "ROBOTSTXT_OBEY",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "ROBOTSTXT_OBEY = False\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n#CONCURRENT_REQUESTS = 32\n# Configure a delay for requests for the same website (default: 0)\n# See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\nDOWNLOAD_DELAY = 0.25\n# The download delay setting will honor only one of:\n#CONCURRENT_REQUESTS_PER_DOMAIN = 16\n#CONCURRENT_REQUESTS_PER_IP = 16",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#CONCURRENT_REQUESTS",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#CONCURRENT_REQUESTS = 32\n# Configure a delay for requests for the same website (default: 0)\n# See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\nDOWNLOAD_DELAY = 0.25\n# The download delay setting will honor only one of:\n#CONCURRENT_REQUESTS_PER_DOMAIN = 16\n#CONCURRENT_REQUESTS_PER_IP = 16\n# Disable cookies (enabled by default)\n#COOKIES_ENABLED = False",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "DOWNLOAD_DELAY",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "DOWNLOAD_DELAY = 0.25\n# The download delay setting will honor only one of:\n#CONCURRENT_REQUESTS_PER_DOMAIN = 16\n#CONCURRENT_REQUESTS_PER_IP = 16\n# Disable cookies (enabled by default)\n#COOKIES_ENABLED = False\n# Disable Telnet Console (enabled by default)\n#TELNETCONSOLE_ENABLED = False\n# Override the default request headers:\n#DEFAULT_REQUEST_HEADERS = {",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#CONCURRENT_REQUESTS_PER_DOMAIN",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#CONCURRENT_REQUESTS_PER_DOMAIN = 16\n#CONCURRENT_REQUESTS_PER_IP = 16\n# Disable cookies (enabled by default)\n#COOKIES_ENABLED = False\n# Disable Telnet Console (enabled by default)\n#TELNETCONSOLE_ENABLED = False\n# Override the default request headers:\n#DEFAULT_REQUEST_HEADERS = {\n#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n#   'Accept-Language': 'en',",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#CONCURRENT_REQUESTS_PER_IP",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#CONCURRENT_REQUESTS_PER_IP = 16\n# Disable cookies (enabled by default)\n#COOKIES_ENABLED = False\n# Disable Telnet Console (enabled by default)\n#TELNETCONSOLE_ENABLED = False\n# Override the default request headers:\n#DEFAULT_REQUEST_HEADERS = {\n#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n#   'Accept-Language': 'en',\n#}",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#COOKIES_ENABLED",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#COOKIES_ENABLED = False\n# Disable Telnet Console (enabled by default)\n#TELNETCONSOLE_ENABLED = False\n# Override the default request headers:\n#DEFAULT_REQUEST_HEADERS = {\n#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n#   'Accept-Language': 'en',\n#}\n# Enable or disable spider middlewares\n# See https://docs.scrapy.org/en/latest/topics/spider-middleware.html",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#TELNETCONSOLE_ENABLED",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#TELNETCONSOLE_ENABLED = False\n# Override the default request headers:\n#DEFAULT_REQUEST_HEADERS = {\n#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n#   'Accept-Language': 'en',\n#}\n# Enable or disable spider middlewares\n# See https://docs.scrapy.org/en/latest/topics/spider-middleware.html\n#SPIDER_MIDDLEWARES = {\n#    'nsreg.middlewares.NsregSpiderMiddleware': 543,",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#DEFAULT_REQUEST_HEADERS",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#DEFAULT_REQUEST_HEADERS = {\n#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n#   'Accept-Language': 'en',\n#}\n# Enable or disable spider middlewares\n# See https://docs.scrapy.org/en/latest/topics/spider-middleware.html\n#SPIDER_MIDDLEWARES = {\n#    'nsreg.middlewares.NsregSpiderMiddleware': 543,\n#}\n# Enable or disable downloader middlewares",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#SPIDER_MIDDLEWARES",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#SPIDER_MIDDLEWARES = {\n#    'nsreg.middlewares.NsregSpiderMiddleware': 543,\n#}\n# Enable or disable downloader middlewares\n# See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html\n#DOWNLOADER_MIDDLEWARES = {\n#    'nsreg.middlewares.NsregDownloaderMiddleware': 543,\n#}\n# Enable or disable extensions\n# See https://docs.scrapy.org/en/latest/topics/extensions.html",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#DOWNLOADER_MIDDLEWARES",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#DOWNLOADER_MIDDLEWARES = {\n#    'nsreg.middlewares.NsregDownloaderMiddleware': 543,\n#}\n# Enable or disable extensions\n# See https://docs.scrapy.org/en/latest/topics/extensions.html\n#EXTENSIONS = {\n#    'scrapy.extensions.telnet.TelnetConsole': None,\n#}\n# Configure item pipelines\n# See https://docs.scrapy.org/en/latest/topics/item-pipeline.html",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#EXTENSIONS",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#EXTENSIONS = {\n#    'scrapy.extensions.telnet.TelnetConsole': None,\n#}\n# Configure item pipelines\n# See https://docs.scrapy.org/en/latest/topics/item-pipeline.html\nITEM_PIPELINES = {\n   'nsreg.pipelines.NsregPipeline': 300,\n}\n# Enable and configure the AutoThrottle extension (disabled by default)\n# See https://docs.scrapy.org/en/latest/topics/autothrottle.html",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "ITEM_PIPELINES",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "ITEM_PIPELINES = {\n   'nsreg.pipelines.NsregPipeline': 300,\n}\n# Enable and configure the AutoThrottle extension (disabled by default)\n# See https://docs.scrapy.org/en/latest/topics/autothrottle.html\n#AUTOTHROTTLE_ENABLED = True\n# The initial download delay\n#AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n#AUTOTHROTTLE_MAX_DELAY = 60",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#AUTOTHROTTLE_ENABLED",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#AUTOTHROTTLE_ENABLED = True\n# The initial download delay\n#AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n#AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n#AUTOTHROTTLE_DEBUG = False",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#AUTOTHROTTLE_START_DELAY",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n#AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n#AUTOTHROTTLE_DEBUG = False\n# Enable and configure HTTP caching (disabled by default)\n# See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#AUTOTHROTTLE_MAX_DELAY",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n#AUTOTHROTTLE_DEBUG = False\n# Enable and configure HTTP caching (disabled by default)\n# See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n#HTTPCACHE_ENABLED = True\n#HTTPCACHE_EXPIRATION_SECS = 0",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#AUTOTHROTTLE_TARGET_CONCURRENCY",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n#AUTOTHROTTLE_DEBUG = False\n# Enable and configure HTTP caching (disabled by default)\n# See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n#HTTPCACHE_ENABLED = True\n#HTTPCACHE_EXPIRATION_SECS = 0\n#HTTPCACHE_DIR = 'httpcache'\n#HTTPCACHE_IGNORE_HTTP_CODES = []\n#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#AUTOTHROTTLE_DEBUG",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#AUTOTHROTTLE_DEBUG = False\n# Enable and configure HTTP caching (disabled by default)\n# See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n#HTTPCACHE_ENABLED = True\n#HTTPCACHE_EXPIRATION_SECS = 0\n#HTTPCACHE_DIR = 'httpcache'\n#HTTPCACHE_IGNORE_HTTP_CODES = []\n#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n# Set settings whose default value is deprecated to a future-proof value\nREQUEST_FINGERPRINTER_IMPLEMENTATION = '2.7'",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#HTTPCACHE_ENABLED",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#HTTPCACHE_ENABLED = True\n#HTTPCACHE_EXPIRATION_SECS = 0\n#HTTPCACHE_DIR = 'httpcache'\n#HTTPCACHE_IGNORE_HTTP_CODES = []\n#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n# Set settings whose default value is deprecated to a future-proof value\nREQUEST_FINGERPRINTER_IMPLEMENTATION = '2.7'\nTWISTED_REACTOR = 'twisted.internet.asyncioreactor.AsyncioSelectorReactor'\nUSER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#HTTPCACHE_EXPIRATION_SECS",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#HTTPCACHE_EXPIRATION_SECS = 0\n#HTTPCACHE_DIR = 'httpcache'\n#HTTPCACHE_IGNORE_HTTP_CODES = []\n#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n# Set settings whose default value is deprecated to a future-proof value\nREQUEST_FINGERPRINTER_IMPLEMENTATION = '2.7'\nTWISTED_REACTOR = 'twisted.internet.asyncioreactor.AsyncioSelectorReactor'\nUSER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#HTTPCACHE_DIR",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#HTTPCACHE_DIR = 'httpcache'\n#HTTPCACHE_IGNORE_HTTP_CODES = []\n#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n# Set settings whose default value is deprecated to a future-proof value\nREQUEST_FINGERPRINTER_IMPLEMENTATION = '2.7'\nTWISTED_REACTOR = 'twisted.internet.asyncioreactor.AsyncioSelectorReactor'\nUSER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#HTTPCACHE_IGNORE_HTTP_CODES",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#HTTPCACHE_IGNORE_HTTP_CODES = []\n#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n# Set settings whose default value is deprecated to a future-proof value\nREQUEST_FINGERPRINTER_IMPLEMENTATION = '2.7'\nTWISTED_REACTOR = 'twisted.internet.asyncioreactor.AsyncioSelectorReactor'\nUSER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "#HTTPCACHE_STORAGE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n# Set settings whose default value is deprecated to a future-proof value\nREQUEST_FINGERPRINTER_IMPLEMENTATION = '2.7'\nTWISTED_REACTOR = 'twisted.internet.asyncioreactor.AsyncioSelectorReactor'\nUSER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "REQUEST_FINGERPRINTER_IMPLEMENTATION",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "REQUEST_FINGERPRINTER_IMPLEMENTATION = '2.7'\nTWISTED_REACTOR = 'twisted.internet.asyncioreactor.AsyncioSelectorReactor'\nUSER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "TWISTED_REACTOR",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "TWISTED_REACTOR = 'twisted.internet.asyncioreactor.AsyncioSelectorReactor'\nUSER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "USER_AGENT",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.settings",
        "description": "nsreg-watcher.src.grabber.nsreg.settings",
        "peekOfCode": "USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'",
        "detail": "nsreg-watcher.src.grabber.nsreg.settings",
        "documentation": {}
    },
    {
        "label": "find_price",
        "kind": 2,
        "importPath": "nsreg-watcher.src.grabber.nsreg.utils",
        "description": "nsreg-watcher.src.grabber.nsreg.utils",
        "peekOfCode": "def find_price(re_pattern, price):\n    price = str(price).strip()\n    if price == \"бесплатно\":\n        price = 0\n    else:\n        if m := re.match(re_pattern, price):\n            price = m.group(1)\n    price = f'{float(price)}'\n    logging.info('price = %s', price)\n    return price",
        "detail": "nsreg-watcher.src.grabber.nsreg.utils",
        "documentation": {}
    },
    {
        "label": "find_price_sub",
        "kind": 2,
        "importPath": "nsreg-watcher.src.grabber.nsreg.utils",
        "description": "nsreg-watcher.src.grabber.nsreg.utils",
        "peekOfCode": "def find_price_sub(re_pattern, price):\n    price = str(price).strip()\n    if m := re.match(re_pattern, price):\n        price = m.group(1)\n        price = re.sub(r'\\s', '', price)\n        price = f'{float(price)}'\n        logging.info('price = %s', price)\n        return price\ndef find_price_withoutre(price):\n    price = str(price)",
        "detail": "nsreg-watcher.src.grabber.nsreg.utils",
        "documentation": {}
    },
    {
        "label": "find_price_withoutre",
        "kind": 2,
        "importPath": "nsreg-watcher.src.grabber.nsreg.utils",
        "description": "nsreg-watcher.src.grabber.nsreg.utils",
        "peekOfCode": "def find_price_withoutre(price):\n    price = str(price)\n    price = re.sub(r'\\s', '', price)\n    price = f'{float(price)}'\n    logging.info('price = %s', price)\n    return price",
        "detail": "nsreg-watcher.src.grabber.nsreg.utils",
        "documentation": {}
    },
    {
        "label": "moscow_tariffs",
        "kind": 2,
        "importPath": "nsreg-watcher.src.grabber.nsreg.utils_spider",
        "description": "nsreg-watcher.src.grabber.nsreg.utils_spider",
        "peekOfCode": "def moscow_tariffs(self, response, re_pattern, name):\n    pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n    pricereg = find_price(re_pattern, pricereg)\n    priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n    priceprolong = find_price(re_pattern, priceprolong)\n    pricechange = response.xpath('/html/body/section/div/div/div/div[2]/div[3]/div[2]/span/text()').get()\n    pricechange = find_price(re_pattern, pricechange)\n    item = NsregItem()\n    item['name'] = name\n    price = item.get('price', EMPTY_PRICE)",
        "detail": "nsreg-watcher.src.grabber.nsreg.utils_spider",
        "documentation": {}
    },
    {
        "label": "moscow_price",
        "kind": 2,
        "importPath": "nsreg-watcher.src.grabber.nsreg.utils_spider",
        "description": "nsreg-watcher.src.grabber.nsreg.utils_spider",
        "peekOfCode": "def moscow_price(self, response, re_pattern, name):\n    pricereg = response.xpath('/html/body/div[1]/div[3]/article/section/table[1]/tr/td[1]/article[1]/div/table/tr[5]/td[2]/text()').get()\n    pricereg = find_price(re_pattern, pricereg)\n    priceprolong = response.xpath('/html/body/div[1]/div[3]/article/section/table[1]/tr/td[1]/article[1]/div/table/tr[5]/td[3]/text()').get()\n    priceprolong = find_price(re_pattern, priceprolong)\n    pricechange = response.xpath('/html/body/div[1]/div[3]/article/section/table[2]/tr/td[1]/article[2]/div/table/tr[10]/td[2]/text()').get()\n    pricechange = find_price(re_pattern, pricechange)\n    item = NsregItem()\n    item['name'] = name\n    price = item.get('price', EMPTY_PRICE)",
        "detail": "nsreg-watcher.src.grabber.nsreg.utils_spider",
        "documentation": {}
    },
    {
        "label": "moscow_rich_price",
        "kind": 2,
        "importPath": "nsreg-watcher.src.grabber.nsreg.utils_spider",
        "description": "nsreg-watcher.src.grabber.nsreg.utils_spider",
        "peekOfCode": "def moscow_rich_price(self, response, re_pattern, name):\n    pricereg = response.xpath('/html/body/div[1]/div[4]/div/div[2]/div[3]/div/div/div/div[2]/div/div/div[1]/div/table/tbody/tr[2]/td[2]/div/p/text()').get()\n    pricereg = find_price(re_pattern, pricereg)\n    priceprolong = response.xpath('/html/body/div[1]/div[4]/div/div[2]/div[3]/div/div/div/div[2]/div/div/div[1]/div/table/tbody/tr[3]/td[2]/div/p/text()').get()\n    priceprolong = find_price(re_pattern, priceprolong)\n    pricechange = response.xpath('/html/body/div[1]/div[4]/div/div[2]/div[3]/div/div/div/div[2]/div/div/div[1]/div/table/tbody/tr[4]/td[2]/div/p/text()').get()\n    pricechange = find_price(re_pattern, pricechange)\n    item = NsregItem()\n    item['name'] = name\n    price = item.get('price', EMPTY_PRICE)",
        "detail": "nsreg-watcher.src.grabber.nsreg.utils_spider",
        "documentation": {}
    },
    {
        "label": "EMPTY_PRICE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.grabber.nsreg.utils_spider",
        "description": "nsreg-watcher.src.grabber.nsreg.utils_spider",
        "peekOfCode": "EMPTY_PRICE = {\n    'pricereg': None,\n    'priceprolong': None,\n    'pricechange': None,\n}\ndef moscow_tariffs(self, response, re_pattern, name):\n    pricereg = response.xpath('/html/body/section/div/div/div/div[2]/div[1]/div[2]/span/text()').get()\n    pricereg = find_price(re_pattern, pricereg)\n    priceprolong = response.xpath('/html/body/section/div/div/div/div[2]/div[2]/div[2]/span/text()').get()\n    priceprolong = find_price(re_pattern, priceprolong)",
        "detail": "nsreg-watcher.src.grabber.nsreg.utils_spider",
        "documentation": {}
    },
    {
        "label": "CatalogConfig",
        "kind": 6,
        "importPath": "nsreg-watcher.src.website.catalog.apps",
        "description": "nsreg-watcher.src.website.catalog.apps",
        "peekOfCode": "class CatalogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'catalog'",
        "detail": "nsreg-watcher.src.website.catalog.apps",
        "documentation": {}
    },
    {
        "label": "CompaniesSortForm",
        "kind": 6,
        "importPath": "nsreg-watcher.src.website.catalog.forms",
        "description": "nsreg-watcher.src.website.catalog.forms",
        "peekOfCode": "class CompaniesSortForm(forms.Form):\n    sort_by = forms.ChoiceField(\n        label=\"Сортировать по\", \n        choices=SORT_BY_CHOICES,\n    )\n    search = forms.CharField(\n        label=\"Поиск\",\n        max_length=50,\n        required=False,)",
        "detail": "nsreg-watcher.src.website.catalog.forms",
        "documentation": {}
    },
    {
        "label": "SORT_BY_CHOICES",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.catalog.forms",
        "description": "nsreg-watcher.src.website.catalog.forms",
        "peekOfCode": "SORT_BY_CHOICES = [\n    (\"CN\", \"Имя компании\"),\n    (\"CI\", \"Город\"),\n    (\"RE\", \"Регистрация домена\"),\n    (\"PR\", \"Продление домена\"),\n    (\"PE\", \"Перенос домена\"),\n]\nclass CompaniesSortForm(forms.Form):\n    sort_by = forms.ChoiceField(\n        label=\"Сортировать по\", ",
        "detail": "nsreg-watcher.src.website.catalog.forms",
        "documentation": {}
    },
    {
        "label": "Regcomp",
        "kind": 6,
        "importPath": "nsreg-watcher.src.website.catalog.models",
        "description": "nsreg-watcher.src.website.catalog.models",
        "peekOfCode": "class Regcomp(models.Model):\n    name = models.CharField(unique=True, max_length=255, blank=True, null=True)\n    note1 = models.TextField(blank=True, null=True)\n    note2 = models.TextField(blank=True, null=True)\n    city = models.CharField(max_length=255, blank=True, null=True)\n    website = models.TextField(blank=True, null=True)\n    pricereg = models.FloatField(blank=True, null=True)\n    priceprolong = models.FloatField(blank=True, null=True)\n    pricechange = models.FloatField(blank=True, null=True)\n    class Meta:",
        "detail": "nsreg-watcher.src.website.catalog.models",
        "documentation": {}
    },
    {
        "label": "regcomp_list",
        "kind": 2,
        "importPath": "nsreg-watcher.src.website.catalog.views",
        "description": "nsreg-watcher.src.website.catalog.views",
        "peekOfCode": "def regcomp_list(request):\n    if request.method == \"POST\":\n        form = CompaniesSortForm(request.POST)\n        if form.is_valid():\n            sort_by = SORT_FIELD_NAMES.get(form.cleaned_data['sort_by'], 'name')\n            search = form.cleaned_data['search']\n            companies = Regcomp.objects.order_by(sort_by)\n    else:\n        form = CompaniesSortForm()\n        sort_by = 'name'",
        "detail": "nsreg-watcher.src.website.catalog.views",
        "documentation": {}
    },
    {
        "label": "regcomp_details",
        "kind": 2,
        "importPath": "nsreg-watcher.src.website.catalog.views",
        "description": "nsreg-watcher.src.website.catalog.views",
        "peekOfCode": "def regcomp_details(request, id):\n    try:\n        company = Regcomp.objects.get(id=id)\n    except Regcomp.DoesNotExist:\n        return HttpResponseNotFound(f\"Компания с идентификатором {id} в базе не найдена.\")         \n    return render(request, 'regcomp-details.html', {'company': company})\ndef about(request):\n    return render(request, 'about-us.html', )",
        "detail": "nsreg-watcher.src.website.catalog.views",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "nsreg-watcher.src.website.catalog.views",
        "description": "nsreg-watcher.src.website.catalog.views",
        "peekOfCode": "def about(request):\n    return render(request, 'about-us.html', )",
        "detail": "nsreg-watcher.src.website.catalog.views",
        "documentation": {}
    },
    {
        "label": "SORT_FIELD_NAMES",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.catalog.views",
        "description": "nsreg-watcher.src.website.catalog.views",
        "peekOfCode": "SORT_FIELD_NAMES = {\n    'CN': 'name',\n    'CI': 'city',\n    'RE': 'pricereg',\n    'PR': 'priceprolong',\n    'PE': 'pricechange',\n}\ndef regcomp_list(request):\n    if request.method == \"POST\":\n        form = CompaniesSortForm(request.POST)",
        "detail": "nsreg-watcher.src.website.catalog.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.asgi",
        "description": "nsreg-watcher.src.website.website.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "nsreg-watcher.src.website.website.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-5irxqgp-i8c)jp&f3*%ubm(-u@1a3f^fb^_nete-@ixdb3ek4a'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-5irxqgp-i8c)jp&f3*%ubm(-u@1a3f^fb^_nete-@ixdb3ek4a'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'debug_toolbar',",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'debug_toolbar',\n    'catalog'\n]",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'debug_toolbar.middleware.DebugToolbarMiddleware',\n]",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "ROOT_URLCONF = 'website.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'website/templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'website/templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "WSGI_APPLICATION = 'website.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'nsreg',\n        'USER': 'nsreg',\n        'PASSWORD': 'Nsreg123',\n        'HOST': 'localhost',",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'nsreg',\n        'USER': 'nsreg',\n        'PASSWORD': 'Nsreg123',\n        'HOST': 'localhost',\n        'PORT': '50432',\n    }\n}",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"website/static\",\n]",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"website/static\",\n]\n# Default primary key field type",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"website/static\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"website/static\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"website/static\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR / \"website/static\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.settings",
        "description": "nsreg-watcher.src.website.website.settings",
        "peekOfCode": "INTERNAL_IPS = [\n    \"127.0.0.1\",\n]",
        "detail": "nsreg-watcher.src.website.website.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.urls",
        "description": "nsreg-watcher.src.website.website.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.regcomp_list, name='regcomp_list'),\n    path('list/', views.regcomp_list, name='regcomp_list'),\n    path('partner/<int:id>/', views.regcomp_details, name='regcomp_details'),\n    path('admin/', admin.site.urls),\n    path('about-us/', views.about, name='about-us'),\n    path('__debug__/', include('debug_toolbar.urls')),\n]",
        "detail": "nsreg-watcher.src.website.website.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "nsreg-watcher.src.website.website.wsgi",
        "description": "nsreg-watcher.src.website.website.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "nsreg-watcher.src.website.website.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "nsreg-watcher.src.website.manage",
        "description": "nsreg-watcher.src.website.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'website.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "nsreg-watcher.src.website.manage",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "nsreg-watcher.venv.Scripts.jp",
        "description": "nsreg-watcher.venv.Scripts.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": "nsreg-watcher.venv.Scripts.jp",
        "documentation": {}
    }
]